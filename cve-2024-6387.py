import socket
import argparse
import ipaddress
import threading
from queue import Queue

def is_port_open(ip, port):
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
        sock.settimeout(1)
        try:
            sock.connect((ip, port))
            return True
        except:
            return False

def get_ssh_banner(ip, port):
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
            sock.settimeout(2)
            sock.connect((ip, port))
            banner = sock.recv(1024).decode().strip()
            return banner
    except Exception as e:
        return str(e)

def check_vulnerability(ip, port, result_queue):
    if not is_port_open(ip, port):
        result_queue.put((ip, port, 'closed', "–ü–æ—Ä—Ç –∑–∞–∫—Ä—ã—Ç"))
        return

    banner = get_ssh_banner(ip, port)
    if "SSH-2.0-OpenSSH" not in banner:
        result_queue.put((ip, port, 'failed', f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–Ω–Ω–µ—Ä SSH: {banner}"))
        return

    vulnerable_versions = [
        'SSH-2.0-OpenSSH_8.5p1',
        'SSH-2.0-OpenSSH_8.6p1',
        'SSH-2.0-OpenSSH_8.7p1',
        'SSH-2.0-OpenSSH_8.8p1',
        'SSH-2.0-OpenSSH_8.9p1',
        'SSH-2.0-OpenSSH_9.0p1',
        'SSH-2.0-OpenSSH_9.1p1',
        'SSH-2.0-OpenSSH_9.2p1',
        'SSH-2.0-OpenSSH_9.3p1',
        'SSH-2.0-OpenSSH_9.4p1',
        'SSH-2.0-OpenSSH_9.5p1',
        'SSH-2.0-OpenSSH_9.6p1',
        'SSH-2.0-OpenSSH_9.7p1'
    ]

    if any(version in banner for version in vulnerable_versions):
        result_queue.put((ip, port, 'vulnerable', f"(–∑–∞–ø—É—â–µ–Ω {banner})"))
    else:
        result_queue.put((ip, port, 'not_vulnerable', f"(–∑–∞–ø—É—â–µ–Ω {banner})"))

def main():
    parser = argparse.ArgumentParser(description="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–∞ —É—è–∑–≤–∏–º—ã–µ –≤–µ—Ä—Å–∏–∏ OpenSSH.")
    parser.add_argument("targets", nargs='+', help="IP –∞–¥—Ä–µ—Å–∞, –¥–æ–º–µ–Ω–Ω—ã–µ –∏–º–µ–Ω–∞, –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º —Å IP –∞–¥—Ä–µ—Å–∞–º–∏ –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω—ã —Å–µ—Ç–∏ CIDR.")
    parser.add_argument("--port", type=int, default=22, help="–ù–æ–º–µ—Ä –ø–æ—Ä—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 22).")

    args = parser.parse_args()
    targets = args.targets
    port = args.port

    ips = []
    for target in targets:
        try:
            with open(target, 'r') as file:
                ips.extend(file.readlines())
        except IOError:
            if '/' in target:
                try:
                    network = ipaddress.ip_network(target, strict=False)
                    ips.extend([str(ip) for ip in network.hosts()])
                except ValueError:
                    print(f"‚ùå [-] –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è CIDR –Ω–æ—Ç–∞—Ü–∏—è: {target}")
            else:
                ips.append(target)

    result_queue = Queue()
    threads = []

    for ip in ips:
        ip = ip.strip()
        thread = threading.Thread(target=check_vulnerability, args=(ip, port, result_queue))
        thread.start()
        threads.append(thread)

    for thread in threads:
        thread.join()

    total_scanned = len(ips)
    closed_ports = 0
    not_vulnerable = []
    vulnerable = []

    while not result_queue.empty():
        ip, port, status, message = result_queue.get()
        if status == 'closed':
            closed_ports += 1
        elif status == 'vulnerable':
            vulnerable.append((ip, message))
        elif status == 'not_vulnerable':
            not_vulnerable.append((ip, message))
        else:
            print(f"‚ö†Ô∏è [!] –°–µ—Ä–≤–µ—Ä –Ω–∞ {ip}:{port} {message}")

    print(f"\nüõ° –°–µ—Ä–≤–µ—Ä—ã –Ω–µ —É—è–∑–≤–∏–º—ã: {len(not_vulnerable)}\n")
    for ip, msg in not_vulnerable:
        print(f"   [+] –°–µ—Ä–≤–µ—Ä –Ω–∞ {ip} {msg}")
    print(f"\n –°–µ—Ä–≤–µ—Ä—ã –≤–µ—Ä–æ—è—Ç–Ω–æ —É—è–∑–≤–∏–º—ã: {len(vulnerable)}\n")
    for ip, msg in vulnerable:
        print(f"   [+] –°–µ—Ä–≤–µ—Ä –Ω–∞ {ip} {msg}")
    print(f"\n –°–µ—Ä–≤–µ—Ä—ã —Å –∑–∞–∫—Ä—ã—Ç—ã–º –ø–æ—Ä—Ç–æ–º 22: {closed_ports}")
    print(f"\n –í—Å–µ–≥–æ –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π: {total_scanned}\n")

if __name__ == "__main__":
    main()